"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var ApplicationSettings = require("application-settings");
require("rxjs/add/operator/map");
require("rxjs/add/operator/do");
var StatusService = (function () {
    function StatusService(http) {
        this.http = http;
    }
    StatusService.prototype.cancelAppointment = function () {
        console.log("local storage  Appointment id is : ", ApplicationSettings.getString("appointmentid"), " vendorid : ", JSON.parse(ApplicationSettings.getString("vendorid", "{}")));
        var appointmentid = JSON.parse(ApplicationSettings.getString("appointmentid"));
        var appointmentUpdateURL = "https://uat.futuredms.com/shyft-api/appointment/" + appointmentid;
        this.id_token = JSON.parse(ApplicationSettings.getString("TOKEN", "{}"));
        var headers = new http_1.Headers();
        var date = new Date();
        var isoDate = date.toISOString();
        var appointment = {
            "id": JSON.parse(ApplicationSettings.getString("appointmentid", "{}")),
            "datetime": JSON.parse(ApplicationSettings.getString("appointmentDate", "{}")),
            "status": "Cancelled",
            "vendor": JSON.parse(ApplicationSettings.getString("vendorToCancel", "{}"))
        };
        console.log("APpointment create url --> ", appointmentUpdateURL);
        console.log("Appointment PUT Data Testing : ", JSON.stringify(appointment));
        headers.append("Authorization", this.id_token);
        return this.http.put(appointmentUpdateURL, appointment, { headers: headers });
    };
    StatusService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http])
    ], StatusService);
    return StatusService;
}());
exports.StatusService = StatusService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdHVzLnNlcnZpY2VzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RhdHVzLnNlcnZpY2VzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsc0NBQTJDO0FBQzNDLHNDQUF3RTtBQUV4RSwwREFBNEQ7QUFDNUQsaUNBQStCO0FBQy9CLGdDQUE4QjtBQUs5QjtJQUlJLHVCQUFvQixJQUFVO1FBQVYsU0FBSSxHQUFKLElBQUksQ0FBTTtJQUFJLENBQUM7SUFFNUIseUNBQWlCLEdBQXhCO1FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsRUFBRSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEVBQUMsY0FBYyxFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFFNUssSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQTtRQUU5RSxJQUFJLG9CQUFvQixHQUFHLGtEQUFrRCxHQUFHLGFBQWEsQ0FBQztRQUU5RixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBRXZFLElBQUksT0FBTyxHQUFHLElBQUksY0FBTyxFQUFFLENBQUM7UUFDNUIsSUFBSSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN0QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbEMsSUFBSyxXQUFXLEdBQUc7WUFDZCxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JFLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsRUFBQyxJQUFJLENBQUMsQ0FBQztZQUM3RSxRQUFRLEVBQUUsV0FBVztZQUNyQixRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0UsQ0FBQztRQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLEVBQUMsb0JBQW9CLENBQUMsQ0FBQTtRQUMvRCxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUM1RSxPQUFPLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUNaLG9CQUFvQixFQUNoQixXQUFXLEVBQ1gsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQ3ZCLENBQUE7SUFDYixDQUFDO0lBaENRLGFBQWE7UUFEekIsaUJBQVUsRUFBRTt5Q0FLaUIsV0FBSTtPQUpyQixhQUFhLENBa0N6QjtJQUFELG9CQUFDO0NBQUEsQUFsQ0QsSUFrQ0M7QUFsQ1ksc0NBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEh0dHAsIEhlYWRlcnMsIFJlc3BvbnNlLCBSZXF1ZXN0T3B0aW9ucyB9IGZyb20gXCJAYW5ndWxhci9odHRwXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIGFzIFJ4T2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL09ic2VydmFibGVcIjtcbmltcG9ydCAqIGFzIEFwcGxpY2F0aW9uU2V0dGluZ3MgZnJvbSBcImFwcGxpY2F0aW9uLXNldHRpbmdzXCI7XG5pbXBvcnQgXCJyeGpzL2FkZC9vcGVyYXRvci9tYXBcIjtcbmltcG9ydCBcInJ4anMvYWRkL29wZXJhdG9yL2RvXCI7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi9zaGFyZWQvdXRpbHMnO1xuaW1wb3J0IHsgaXNBbmRyb2lkLCBpc0lPUywgZGV2aWNlLCBzY3JlZW4gfSBmcm9tIFwicGxhdGZvcm1cIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFN0YXR1c1NlcnZpY2Uge1xuICAgIHB1YmxpYyBhcHBvaW50bWVudElEO1xuICAgIHByaXZhdGUgaWRfdG9rZW47XG4gICAgXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwKSB7IH1cblxuICAgIHB1YmxpYyBjYW5jZWxBcHBvaW50bWVudCgpe1xuICAgICAgICBjb25zb2xlLmxvZyhcImxvY2FsIHN0b3JhZ2UgIEFwcG9pbnRtZW50IGlkIGlzIDogXCIsIEFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0U3RyaW5nKFwiYXBwb2ludG1lbnRpZFwiKSxcIiB2ZW5kb3JpZCA6IFwiLEpTT04ucGFyc2UoQXBwbGljYXRpb25TZXR0aW5ncy5nZXRTdHJpbmcoXCJ2ZW5kb3JpZFwiLFwie31cIikpKVxuICAgICAgICBcbiAgICAgICAgbGV0IGFwcG9pbnRtZW50aWQgPSBKU09OLnBhcnNlKEFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0U3RyaW5nKFwiYXBwb2ludG1lbnRpZFwiKSlcbiAgICAgICAgXG4gICAgICAgIGxldCBhcHBvaW50bWVudFVwZGF0ZVVSTCA9IFwiaHR0cHM6Ly91YXQuZnV0dXJlZG1zLmNvbS9zaHlmdC1hcGkvYXBwb2ludG1lbnQvXCIgKyBhcHBvaW50bWVudGlkO1xuXG4gICAgICAgIHRoaXMuaWRfdG9rZW4gPSBKU09OLnBhcnNlKEFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0U3RyaW5nKFwiVE9LRU5cIixcInt9XCIpKSAgICAgICAgICAgIFxuICAgICAgICBcbiAgICAgICAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGxldCBpc29EYXRlID0gZGF0ZS50b0lTT1N0cmluZygpO1xuICAgICAgIGxldCAgYXBwb2ludG1lbnQgPSB7XG4gICAgICAgICAgICBcImlkXCI6IEpTT04ucGFyc2UoQXBwbGljYXRpb25TZXR0aW5ncy5nZXRTdHJpbmcoXCJhcHBvaW50bWVudGlkXCIsXCJ7fVwiKSksXG4gICAgICAgICAgICBcImRhdGV0aW1lXCI6IEpTT04ucGFyc2UoQXBwbGljYXRpb25TZXR0aW5ncy5nZXRTdHJpbmcoXCJhcHBvaW50bWVudERhdGVcIixcInt9XCIpKSxcbiAgICAgICAgICAgIFwic3RhdHVzXCI6IFwiQ2FuY2VsbGVkXCIsXG4gICAgICAgICAgICBcInZlbmRvclwiOiBKU09OLnBhcnNlKEFwcGxpY2F0aW9uU2V0dGluZ3MuZ2V0U3RyaW5nKFwidmVuZG9yVG9DYW5jZWxcIixcInt9XCIpKVxuICAgICAgICB9O1xuICAgICAgICBjb25zb2xlLmxvZyhcIkFQcG9pbnRtZW50IGNyZWF0ZSB1cmwgLS0+IFwiLGFwcG9pbnRtZW50VXBkYXRlVVJMKSAgICAgICAgXG4gICAgICAgIGNvbnNvbGUubG9nKFwiQXBwb2ludG1lbnQgUFVUIERhdGEgVGVzdGluZyA6IFwiLCBKU09OLnN0cmluZ2lmeShhcHBvaW50bWVudCkpO1xuICAgICAgICBoZWFkZXJzLmFwcGVuZChcIkF1dGhvcml6YXRpb25cIiwgdGhpcy5pZF90b2tlbik7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucHV0KFxuICAgICAgICAgICAgICAgIGFwcG9pbnRtZW50VXBkYXRlVVJMLFxuICAgICAgICAgICAgICAgICAgICBhcHBvaW50bWVudCxcbiAgICAgICAgICAgICAgICAgICAgeyBoZWFkZXJzOiBoZWFkZXJzIH1cbiAgICAgICAgICAgICAgICApXG4gICAgfVxuXG59XG4iXX0=