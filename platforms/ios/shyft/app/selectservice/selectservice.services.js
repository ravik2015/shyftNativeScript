"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var ApplicationSettings = require("application-settings");
var Observable_1 = require("rxjs/Observable");
require("rxjs/add/operator/do");
require("rxjs/add/operator/map");
var utils = require("../shared/utils");
var angular2_uuid_1 = require("angular2-uuid");
require("rxjs/add/observable/of");
var SelectService = (function () {
    function SelectService(http) {
        this.http = http;
        this.servicesSelections = Array();
        this.test = Array();
        var date = new Date();
        var isoDate = date.toISOString();
        this.customerAppointment = {
            "id": "",
            "datetime": isoDate,
            "status": "Pending",
            "vendor": ""
        };
    }
    //---------------------- Service GET Request ----------------------------//
    SelectService.prototype.servicesGet = function (ID) {
        this.vendorID = ID.replace(/["']/g, "");
        var ServiceGetUrl = utils.baseurl + "vendor/" + this.vendorID;
        var headers = this.servicesHeader();
        return this.http.get(ServiceGetUrl, { headers: headers })
            .map(function (res) {
            // If request fails, throw an Error that will be caught
            if (res.status < 200 || res.status >= 300) {
                throw new Error('This request has failed ' + res.status);
            }
            else {
                return res.json();
            }
        });
    };
    SelectService.prototype.servicesHeader = function () {
        this.id_token = JSON.parse(ApplicationSettings.getString("TOKEN", "{}"));
        var headers = new http_1.Headers();
        headers.append("Authorization", this.id_token);
        headers.append("Content-Type", "application/json");
        return headers;
    };
    SelectService.prototype.createCustomerAppointment = function (uuid, vendorId) {
        this.customerAppointment.id = uuid;
        this.customerAppointment.vendor = vendorId;
        console.log("uuid: ", uuid, "vendorId: ", " this.customerAppointment: ", JSON.stringify(this.customerAppointment));
        return Observable_1.Observable.of(this.customerAppointment);
    };
    SelectService.prototype.createAppointment = function (uuid, vendorId, date) {
        var _this = this;
        console.log("appointmentid : ", uuid, "vendorid", vendorId, "date : ", date);
        ApplicationSettings.setString("appointmentid", JSON.stringify(uuid));
        this.appointmentid = uuid;
        var appointmentCreateURL = "https://uat.futuredms.com/shyft-api/appointment/" + this.appointmentid;
        // if (isIOS) {     
        //     this.id_token = localStorage.getItem("IOSToken")
        //             }
        // else
        // {
        //     this.id_token = JSON.parse(ApplicationSettings.getString("TOKEN","{}"))            
        // }
        this.id_token = JSON.parse(ApplicationSettings.getString("TOKEN", "{}"));
        var headers = new http_1.Headers();
        var appointment = {
            "id": this.appointmentid,
            "datetime": date,
            "status": "Pending",
            "vendor": vendorId
        };
        console.log("Appointment Create Url --> ", appointmentCreateURL);
        console.log("Appointment PUT Data Testing-----> ", JSON.stringify(appointment));
        headers.append("Authorization", this.id_token);
        return this.http.put(appointmentCreateURL, appointment, { headers: headers })
            .subscribe(function (result) {
            console.log("Appointment Create Success : ", (JSON.stringify(result)));
            var services = JSON.parse(ApplicationSettings.getString("servicesSelections"));
            services.map(function (item) {
                console.log("Service parse are : ", JSON.stringify(item));
            });
        }, function (error) {
            console.log("Appointment Create Error : ", error);
            _this.vehicleAdd();
            var services = JSON.parse(ApplicationSettings.getString("servicesSelections"));
            services.map(function (item) {
                console.log("service are", item.service);
                _this.serviceAdd(item.service);
            });
        });
    };
    SelectService.prototype.handleErrors = function (error) {
        console.log(JSON.stringify(error.json()));
        return Observable_1.Observable.throw(error);
    };
    SelectService.prototype.serviceAdd = function (servicesId) {
        var serviceid = angular2_uuid_1.UUID.UUID();
        var serviceSelectionURL = "https://uat.futuredms.com/shyft-api/appointment/" + this.appointmentid + "/service-selection/" + serviceid;
        this.id_token = JSON.parse(ApplicationSettings.getString("TOKEN", "{}"));
        var headers = new http_1.Headers();
        headers.append("Authorization", this.id_token);
        ;
        var serviceBody = {
            "id": serviceid,
            "status": "pending",
            "service": servicesId
        };
        return this.http.put(serviceSelectionURL, serviceBody, { headers: headers })
            .subscribe(function (result) {
            console.log("Service added to Appointment : ", JSON.stringify(result));
        }, function (error) {
            console.log("Service add Error : ", error);
        });
    };
    SelectService.prototype.addServiceSelectionIntoAppointment = function (servicesSelection) {
        this.customerAppointment.serviceSelections = servicesSelection;
    };
    SelectService.prototype.getCustomerAppointment = function () {
        return Observable_1.Observable.of(this.customerAppointment);
    };
    SelectService.prototype.addServiceSelection = function (serviceSelection) {
        this.servicesSelections.push(serviceSelection);
        this.customerAppointment.serviceSelections.push(serviceSelection);
    };
    SelectService.prototype.getServicesSelections = function () {
        console.log("this.selectService.getServicesSelections()", this.servicesSelections);
        return this.servicesSelections;
    };
    SelectService.prototype.serviceSelection = function (serviceID, uuid) {
        this.serviceID = serviceID;
        this.appointmentid = uuid;
        var serviceid = angular2_uuid_1.UUID.UUID();
        var serviceBody = {
            "id": serviceid,
            "status": "pending",
            "service": this.serviceID
        };
        this.servicesSelections.push(serviceBody);
        this.customerAppointment.serviceSelections = this.servicesSelections;
        ApplicationSettings.setString("servicesSelections", JSON.stringify(this.servicesSelections));
    };
    SelectService.prototype.vehicleAdd = function () {
        var vehicleUUID = angular2_uuid_1.UUID.UUID();
        var vehicleaddURL = "https://uat.futuredms.com/shyft-api/appointment/" + this.appointmentid + "/vehicle";
        // if (isIOS) {     
        //     this.id_token = localStorage.getItem("IOSToken")
        //             }
        // else
        // {
        //     this.id_token = JSON.parse(ApplicationSettings.getString("TOKEN","{}"))            
        // }
        this.id_token = JSON.parse(ApplicationSettings.getString("TOKEN", "{}"));
        var headers = new http_1.Headers();
        var date = new Date();
        var isoDate = date.toISOString();
        console.log(" this is my iso date ------> ", isoDate);
        var vehicleadd = {
            "id": vehicleUUID,
            "vehicleId": JSON.parse(ApplicationSettings.getString("vehicleid")),
            "miles": 123
        };
        console.log("vehicleadd create url --> ", vehicleaddURL);
        console.log("vehicleadd PUT Data Testing-----> ", JSON.stringify(vehicleadd));
        headers.append("Authorization", this.id_token);
        return this.http.put(vehicleaddURL, vehicleadd, { headers: headers })
            .subscribe(function (result) {
            console.log("Vehicle Add Success ------------> ", JSON.stringify(result));
        }, function (error) {
            console.log("Vehicle Add Error ------------>", error);
        });
    };
    SelectService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http])
    ], SelectService);
    return SelectService;
}());
exports.SelectService = SelectService;
//# sourceMappingURL=data:application/json;base64,