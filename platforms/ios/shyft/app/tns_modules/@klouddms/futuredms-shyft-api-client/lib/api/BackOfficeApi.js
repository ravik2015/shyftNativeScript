/**
 * Shyft Auto
 * An api to run the client and administration of the shyft auto app.
 *
 * OpenAPI spec version: 0.2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import 'rxjs/add/operator/map';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
/* tslint:disable:no-unused-variable member-ordering */
var BackOfficeApi = /** @class */ (function () {
    function BackOfficeApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://uat.futuredms.com/shyft-api/v1';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    /**
         *
         * Extends object by coping non-existing properties.
         * @param objA object to be extended
         * @param objB source object
         */
    BackOfficeApi.prototype.extendObj = /**
         *
         * Extends object by coping non-existing properties.
         * @param objA object to be extended
         * @param objB source object
         */
    function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param fleetId the id of the fleet vehicle
     * @param fleetRequest adds or updates a vehicle in the fleet
     * @param authorization Authorization Header
     */
    /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param fleetId the id of the fleet vehicle
         * @param fleetRequest adds or updates a vehicle in the fleet
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.fleetFleetIdPut = /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param fleetId the id of the fleet vehicle
         * @param fleetRequest adds or updates a vehicle in the fleet
         * @param authorization Authorization Header
         */
    function (fleetId, fleetRequest, authorization, extraHttpRequestParams) {
        return this.fleetFleetIdPutWithHttpInfo(fleetId, fleetRequest, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The vendor list allows the backoffice to manage shyft auto customers
     * Retrieves a list of Vendors
     * @param authorization Authorization Header
     */
    /**
         * The vendor list allows the backoffice to manage shyft auto customers
         * Retrieves a list of Vendors
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorGet = /**
         * The vendor list allows the backoffice to manage shyft auto customers
         * Retrieves a list of Vendors
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.vendorGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * A vendor defines services in a service area
     * retrieves a vendor
     * @param vendorId the id of a vendor
     * @param authorization Authorization Header
     */
    /**
         * A vendor defines services in a service area
         * retrieves a vendor
         * @param vendorId the id of a vendor
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdGet = /**
         * A vendor defines services in a service area
         * retrieves a vendor
         * @param vendorId the id of a vendor
         * @param authorization Authorization Header
         */
    function (vendorId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdGetWithHttpInfo(vendorId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param vendorId the id of the vendor
     * @param vendorRequest vendor data
     * @param authorization Authorization Header
     */
    /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param vendorId the id of the vendor
         * @param vendorRequest vendor data
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdPut = /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param vendorId the id of the vendor
         * @param vendorRequest vendor data
         * @param authorization Authorization Header
         */
    function (vendorId, vendorRequest, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdPutWithHttpInfo(vendorId, vendorRequest, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param vendorId the id of the vendor
     * @param authorization Authorization Header
     */
    /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param vendorId the id of the vendor
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdServicesGet = /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param vendorId the id of the vendor
         * @param authorization Authorization Header
         */
    function (vendorId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdServicesGetWithHttpInfo(vendorId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Remove Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdServicesVendorServiceIdDelete = /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdServicesVendorServiceIdDeleteWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Retrieving Vendor Services
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdServicesVendorServiceIdGet = /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdServicesVendorServiceIdGetWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Update Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdServicesVendorServiceIdPut = /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdServicesVendorServiceIdPutWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param fleetId the id of the fleet vehicle
     * @param fleetRequest adds or updates a vehicle in the fleet
     * @param authorization Authorization Header
     */
    /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param fleetId the id of the fleet vehicle
         * @param fleetRequest adds or updates a vehicle in the fleet
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.fleetFleetIdPutWithHttpInfo = /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param fleetId the id of the fleet vehicle
         * @param fleetRequest adds or updates a vehicle in the fleet
         * @param authorization Authorization Header
         */
    function (fleetId, fleetRequest, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/fleet/" + fleetId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling fleetFleetIdPut.');
        }
        // verify required parameter 'fleetRequest' is not null or undefined
        if (fleetRequest === null || fleetRequest === undefined) {
            throw new Error('Required parameter fleetRequest was null or undefined when calling fleetFleetIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: fleetRequest == null ? '' : JSON.stringify(fleetRequest),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The vendor list allows the backoffice to manage shyft auto customers
     * Retrieves a list of Vendors
     * @param authorization Authorization Header
     */
    /**
         * The vendor list allows the backoffice to manage shyft auto customers
         * Retrieves a list of Vendors
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorGetWithHttpInfo = /**
         * The vendor list allows the backoffice to manage shyft auto customers
         * Retrieves a list of Vendors
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/vendor";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * A vendor defines services in a service area
     * retrieves a vendor
     * @param vendorId the id of a vendor
     * @param authorization Authorization Header
     */
    /**
         * A vendor defines services in a service area
         * retrieves a vendor
         * @param vendorId the id of a vendor
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdGetWithHttpInfo = /**
         * A vendor defines services in a service area
         * retrieves a vendor
         * @param vendorId the id of a vendor
         * @param authorization Authorization Header
         */
    function (vendorId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param vendorId the id of the vendor
     * @param vendorRequest vendor data
     * @param authorization Authorization Header
     */
    /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param vendorId the id of the vendor
         * @param vendorRequest vendor data
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdPutWithHttpInfo = /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param vendorId the id of the vendor
         * @param vendorRequest vendor data
         * @param authorization Authorization Header
         */
    function (vendorId, vendorRequest, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdPut.');
        }
        // verify required parameter 'vendorRequest' is not null or undefined
        if (vendorRequest === null || vendorRequest === undefined) {
            throw new Error('Required parameter vendorRequest was null or undefined when calling vendorVendorIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: vendorRequest == null ? '' : JSON.stringify(vendorRequest),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param vendorId the id of the vendor
     * @param authorization Authorization Header
     */
    /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param vendorId the id of the vendor
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdServicesGetWithHttpInfo = /**
         * Adding and updating vendors
         * adds or updates a vendor at the given id
         * @param vendorId the id of the vendor
         * @param authorization Authorization Header
         */
    function (vendorId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/services");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Remove Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdServicesVendorServiceIdDeleteWithHttpInfo = /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/services/" + vendorServiceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdDelete.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdDelete.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Retrieving Vendor Services
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdServicesVendorServiceIdGetWithHttpInfo = /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/services/" + vendorServiceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdGet.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    BackOfficeApi.prototype.vendorVendorIdServicesVendorServiceIdPutWithHttpInfo = /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/services/" + vendorServiceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdPut.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    BackOfficeApi.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    BackOfficeApi.ctorParameters = function () { return [
        { type: Http, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
        { type: Configuration, decorators: [{ type: Optional },] },
    ]; };
    return BackOfficeApi;
}());
export { BackOfficeApi };
//# sourceMappingURL=BackOfficeApi.js.map