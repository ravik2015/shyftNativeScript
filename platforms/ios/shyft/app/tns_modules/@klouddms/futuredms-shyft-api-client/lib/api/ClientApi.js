/**
 * Shyft Auto
 * An api to run the client and administration of the shyft auto app.
 *
 * OpenAPI spec version: 0.2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import 'rxjs/add/operator/map';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
/* tslint:disable:no-unused-variable member-ordering */
var ClientApi = /** @class */ (function () {
    function ClientApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://uat.futuredms.com/shyft-api/v1';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    /**
         *
         * Extends object by coping non-existing properties.
         * @param objA object to be extended
         * @param objB source object
         */
    ClientApi.prototype.extendObj = /**
         *
         * Extends object by coping non-existing properties.
         * @param objA object to be extended
         * @param objB source object
         */
    function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Appointments allow clients to schedule service.
     * Retrieves an appointment by id
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * Appointments allow clients to schedule service.
         * Retrieves an appointment by id
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdGet = /**
         * Appointments allow clients to schedule service.
         * Retrieves an appointment by id
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdGetWithHttpInfo(appointmentId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The location of an appointment pickup
     * An appointment location
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * The location of an appointment pickup
         * An appointment location
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdLocationGet = /**
         * The location of an appointment pickup
         * An appointment location
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdLocationGetWithHttpInfo(appointmentId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Appointments have a location for pickup
     * Post a location for an appointment
     * @param appointmentId The id of the appointment
     * @param appointmentLocationRequest The location of an appointment
     * @param authorization Authorization Header
     */
    /**
         * Appointments have a location for pickup
         * Post a location for an appointment
         * @param appointmentId The id of the appointment
         * @param appointmentLocationRequest The location of an appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdLocationPut = /**
         * Appointments have a location for pickup
         * Post a location for an appointment
         * @param appointmentId The id of the appointment
         * @param appointmentLocationRequest The location of an appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, appointmentLocationRequest, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdLocationPutWithHttpInfo(appointmentId, appointmentLocationRequest, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Appointments include pickups
     * Retrieves the pickup data associated with an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * Appointments include pickups
         * Retrieves the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdPickupGet = /**
         * Appointments include pickups
         * Retrieves the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdPickupGetWithHttpInfo(appointmentId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Appointments allow clients to schedule service
     * Puts an appointment at id
     * @param appointmentId the id of the appointment
     * @param appointmentRequest the appointment being added to the system
     * @param authorization Authorization Header
     */
    /**
         * Appointments allow clients to schedule service
         * Puts an appointment at id
         * @param appointmentId the id of the appointment
         * @param appointmentRequest the appointment being added to the system
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdPut = /**
         * Appointments allow clients to schedule service
         * Puts an appointment at id
         * @param appointmentId the id of the appointment
         * @param appointmentRequest the appointment being added to the system
         * @param authorization Authorization Header
         */
    function (appointmentId, appointmentRequest, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdPutWithHttpInfo(appointmentId, appointmentRequest, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The appointment service selections
     * Returns the service selections of an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdServiceSelectionGet = /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdServiceSelectionGetWithHttpInfo(appointmentId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The appointment service selections
     * Returns the service selections of an appointment
     * @param appointmentId The id of the appointment
     * @param serviceSelectionId the id of the association between a user selected service and an appointment
     * @param authorization Authorization Header
     */
    /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdServiceSelectionServiceSelectionIdGet = /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, serviceSelectionId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdServiceSelectionServiceSelectionIdGetWithHttpInfo(appointmentId, serviceSelectionId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The appointment service selections
     * Returns the service selections of an appointment
     * @param appointmentId The id of the appointment
     * @param serviceSelectionId the id of the association between a user selected service and an appointment
     * @param serviceSelection Model to send update the to the appointment&#39;s service selection
     * @param authorization Authorization Header
     */
    /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param serviceSelection Model to send update the to the appointment&#39;s service selection
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdServiceSelectionServiceSelectionIdPut = /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param serviceSelection Model to send update the to the appointment&#39;s service selection
         * @param authorization Authorization Header
         */
    function (appointmentId, serviceSelectionId, serviceSelection, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdServiceSelectionServiceSelectionIdPutWithHttpInfo(appointmentId, serviceSelectionId, serviceSelection, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * User makes an appointment
     * Returns the user of an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * User makes an appointment
         * Returns the user of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdUserGet = /**
         * User makes an appointment
         * Returns the user of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdUserGetWithHttpInfo(appointmentId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The vehicle of an appointment
     * Adds a vehicle to this appointment
     * @param appointmentId Appointment Id
     * @param appointmentVehicleRequest Appointment Vehicle Request
     * @param authorization Authorization header
     */
    /**
         * The vehicle of an appointment
         * Adds a vehicle to this appointment
         * @param appointmentId Appointment Id
         * @param appointmentVehicleRequest Appointment Vehicle Request
         * @param authorization Authorization header
         */
    ClientApi.prototype.appointmentAppointmentIdVehiclePut = /**
         * The vehicle of an appointment
         * Adds a vehicle to this appointment
         * @param appointmentId Appointment Id
         * @param appointmentVehicleRequest Appointment Vehicle Request
         * @param authorization Authorization header
         */
    function (appointmentId, appointmentVehicleRequest, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdVehiclePutWithHttpInfo(appointmentId, appointmentVehicleRequest, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Appointments allow clients to schedule service
     * Retrieves a list of appointments
     * @param authorization Authorization Header
     * @param vendorId vendorId
     */
    /**
         * Appointments allow clients to schedule service
         * Retrieves a list of appointments
         * @param authorization Authorization Header
         * @param vendorId vendorId
         */
    ClientApi.prototype.appointmentGet = /**
         * Appointments allow clients to schedule service
         * Retrieves a list of appointments
         * @param authorization Authorization Header
         * @param vendorId vendorId
         */
    function (authorization, vendorId, extraHttpRequestParams) {
        return this.appointmentGetWithHttpInfo(authorization, vendorId, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The location of the pickup
     * Stores the coordinates and reverse lookup address where available
     * @param authorization Authorization Header
     */
    /**
         * The location of the pickup
         * Stores the coordinates and reverse lookup address where available
         * @param authorization Authorization Header
         */
    ClientApi.prototype.locationGet = /**
         * The location of the pickup
         * Stores the coordinates and reverse lookup address where available
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.locationGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Users submit location data for pickups
     * Retrieves a location by id
     * @param locationId
     * @param authorization Authorization Header
     */
    /**
         * Users submit location data for pickups
         * Retrieves a location by id
         * @param locationId
         * @param authorization Authorization Header
         */
    ClientApi.prototype.locationLocationIdGet = /**
         * Users submit location data for pickups
         * Retrieves a location by id
         * @param locationId
         * @param authorization Authorization Header
         */
    function (locationId, authorization, extraHttpRequestParams) {
        return this.locationLocationIdGetWithHttpInfo(locationId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
     * Retrieves a list of pickups
     * @param authorization Authorization Header
     */
    /**
         * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
         * Retrieves a list of pickups
         * @param authorization Authorization Header
         */
    ClientApi.prototype.pickupGet = /**
         * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
         * Retrieves a list of pickups
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.pickupGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
     * Returns a pickup with the given id
     * @param pickupId
     * @param authorization Authorization Header
     */
    /**
         * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
         * Returns a pickup with the given id
         * @param pickupId
         * @param authorization Authorization Header
         */
    ClientApi.prototype.pickupPickupIdGet = /**
         * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
         * Returns a pickup with the given id
         * @param pickupId
         * @param authorization Authorization Header
         */
    function (pickupId, authorization, extraHttpRequestParams) {
        return this.pickupPickupIdGetWithHttpInfo(pickupId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Services are specific jobs advertised for the conceirge pickup
     * Returns a list of services
     * @param authorization Authorization Header
     */
    /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param authorization Authorization Header
         */
    ClientApi.prototype.serviceGet = /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.serviceGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Service Selections represent user selected service items
     * Returns an collection of service selections
     * @param authorization Authorization Header
     */
    /**
         * Service Selections represent user selected service items
         * Returns an collection of service selections
         * @param authorization Authorization Header
         */
    ClientApi.prototype.serviceSelectionGet = /**
         * Service Selections represent user selected service items
         * Returns an collection of service selections
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.serviceSelectionGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Service Selection represents a user selected service
     * Returns the selection with the given id
     * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
     * @param authorization Authorization Header
     */
    /**
         * Service Selection represents a user selected service
         * Returns the selection with the given id
         * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
         * @param authorization Authorization Header
         */
    ClientApi.prototype.serviceSelectionServiceSelectionIdGet = /**
         * Service Selection represents a user selected service
         * Returns the selection with the given id
         * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
         * @param authorization Authorization Header
         */
    function (serviceSelectionId, authorization, extraHttpRequestParams) {
        return this.serviceSelectionServiceSelectionIdGetWithHttpInfo(serviceSelectionId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Services are specific jobs advertised for the conceirge pickup
     * Returns a list of services
     * @param serviceId the id of the service
     * @param authorization Authorization Header
     */
    /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param serviceId the id of the service
         * @param authorization Authorization Header
         */
    ClientApi.prototype.serviceServiceIdGet = /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param serviceId the id of the service
         * @param authorization Authorization Header
         */
    function (serviceId, authorization, extraHttpRequestParams) {
        return this.serviceServiceIdGetWithHttpInfo(serviceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Users
     * Returns a list of users
     * @param authorization Authorization Header
     */
    /**
         * Users
         * Returns a list of users
         * @param authorization Authorization Header
         */
    ClientApi.prototype.userGet = /**
         * Users
         * Returns a list of users
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.userGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The user
     * Returns a user profile
     * @param userId the id of the user
     * @param authorization Authorization Header
     */
    /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    ClientApi.prototype.userUserIdGet = /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    function (userId, authorization, extraHttpRequestParams) {
        return this.userUserIdGetWithHttpInfo(userId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The user
     * Returns a user profile
     * @param userId the id of the user
     * @param authorization Authorization Header
     */
    /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    ClientApi.prototype.userUserIdPut = /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    function (userId, authorization, extraHttpRequestParams) {
        return this.userUserIdPutWithHttpInfo(userId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Remove Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    ClientApi.prototype.vendorVendorIdServicesVendorServiceIdDelete = /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdServicesVendorServiceIdDeleteWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Retrieving Vendor Services
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    ClientApi.prototype.vendorVendorIdServicesVendorServiceIdGet = /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdServicesVendorServiceIdGetWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Update Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    ClientApi.prototype.vendorVendorIdServicesVendorServiceIdPut = /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdServicesVendorServiceIdPutWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Appointments allow clients to schedule service.
     * Retrieves an appointment by id
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * Appointments allow clients to schedule service.
         * Retrieves an appointment by id
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdGetWithHttpInfo = /**
         * Appointments allow clients to schedule service.
         * Retrieves an appointment by id
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The location of an appointment pickup
     * An appointment location
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * The location of an appointment pickup
         * An appointment location
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdLocationGetWithHttpInfo = /**
         * The location of an appointment pickup
         * An appointment location
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/location");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdLocationGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Appointments have a location for pickup
     * Post a location for an appointment
     * @param appointmentId The id of the appointment
     * @param appointmentLocationRequest The location of an appointment
     * @param authorization Authorization Header
     */
    /**
         * Appointments have a location for pickup
         * Post a location for an appointment
         * @param appointmentId The id of the appointment
         * @param appointmentLocationRequest The location of an appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdLocationPutWithHttpInfo = /**
         * Appointments have a location for pickup
         * Post a location for an appointment
         * @param appointmentId The id of the appointment
         * @param appointmentLocationRequest The location of an appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, appointmentLocationRequest, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/location");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdLocationPut.');
        }
        // verify required parameter 'appointmentLocationRequest' is not null or undefined
        if (appointmentLocationRequest === null || appointmentLocationRequest === undefined) {
            throw new Error('Required parameter appointmentLocationRequest was null or undefined when calling appointmentAppointmentIdLocationPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: appointmentLocationRequest == null ? '' : JSON.stringify(appointmentLocationRequest),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Appointments include pickups
     * Retrieves the pickup data associated with an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * Appointments include pickups
         * Retrieves the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdPickupGetWithHttpInfo = /**
         * Appointments include pickups
         * Retrieves the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/pickup");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdPickupGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Appointments allow clients to schedule service
     * Puts an appointment at id
     * @param appointmentId the id of the appointment
     * @param appointmentRequest the appointment being added to the system
     * @param authorization Authorization Header
     */
    /**
         * Appointments allow clients to schedule service
         * Puts an appointment at id
         * @param appointmentId the id of the appointment
         * @param appointmentRequest the appointment being added to the system
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdPutWithHttpInfo = /**
         * Appointments allow clients to schedule service
         * Puts an appointment at id
         * @param appointmentId the id of the appointment
         * @param appointmentRequest the appointment being added to the system
         * @param authorization Authorization Header
         */
    function (appointmentId, appointmentRequest, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdPut.');
        }
        // verify required parameter 'appointmentRequest' is not null or undefined
        if (appointmentRequest === null || appointmentRequest === undefined) {
            throw new Error('Required parameter appointmentRequest was null or undefined when calling appointmentAppointmentIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: appointmentRequest == null ? '' : JSON.stringify(appointmentRequest),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The appointment service selections
     * Returns the service selections of an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdServiceSelectionGetWithHttpInfo = /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/service-selection");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdServiceSelectionGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The appointment service selections
     * Returns the service selections of an appointment
     * @param appointmentId The id of the appointment
     * @param serviceSelectionId the id of the association between a user selected service and an appointment
     * @param authorization Authorization Header
     */
    /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdServiceSelectionServiceSelectionIdGetWithHttpInfo = /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, serviceSelectionId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/service-selection/" + serviceSelectionId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdServiceSelectionServiceSelectionIdGet.');
        }
        // verify required parameter 'serviceSelectionId' is not null or undefined
        if (serviceSelectionId === null || serviceSelectionId === undefined) {
            throw new Error('Required parameter serviceSelectionId was null or undefined when calling appointmentAppointmentIdServiceSelectionServiceSelectionIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The appointment service selections
     * Returns the service selections of an appointment
     * @param appointmentId The id of the appointment
     * @param serviceSelectionId the id of the association between a user selected service and an appointment
     * @param serviceSelection Model to send update the to the appointment&#39;s service selection
     * @param authorization Authorization Header
     */
    /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param serviceSelection Model to send update the to the appointment&#39;s service selection
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdServiceSelectionServiceSelectionIdPutWithHttpInfo = /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param serviceSelection Model to send update the to the appointment&#39;s service selection
         * @param authorization Authorization Header
         */
    function (appointmentId, serviceSelectionId, serviceSelection, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/service-selection/" + serviceSelectionId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdServiceSelectionServiceSelectionIdPut.');
        }
        // verify required parameter 'serviceSelectionId' is not null or undefined
        if (serviceSelectionId === null || serviceSelectionId === undefined) {
            throw new Error('Required parameter serviceSelectionId was null or undefined when calling appointmentAppointmentIdServiceSelectionServiceSelectionIdPut.');
        }
        // verify required parameter 'serviceSelection' is not null or undefined
        if (serviceSelection === null || serviceSelection === undefined) {
            throw new Error('Required parameter serviceSelection was null or undefined when calling appointmentAppointmentIdServiceSelectionServiceSelectionIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: serviceSelection == null ? '' : JSON.stringify(serviceSelection),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * User makes an appointment
     * Returns the user of an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * User makes an appointment
         * Returns the user of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    ClientApi.prototype.appointmentAppointmentIdUserGetWithHttpInfo = /**
         * User makes an appointment
         * Returns the user of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/user");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdUserGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The vehicle of an appointment
     * Adds a vehicle to this appointment
     * @param appointmentId Appointment Id
     * @param appointmentVehicleRequest Appointment Vehicle Request
     * @param authorization Authorization header
     */
    /**
         * The vehicle of an appointment
         * Adds a vehicle to this appointment
         * @param appointmentId Appointment Id
         * @param appointmentVehicleRequest Appointment Vehicle Request
         * @param authorization Authorization header
         */
    ClientApi.prototype.appointmentAppointmentIdVehiclePutWithHttpInfo = /**
         * The vehicle of an appointment
         * Adds a vehicle to this appointment
         * @param appointmentId Appointment Id
         * @param appointmentVehicleRequest Appointment Vehicle Request
         * @param authorization Authorization header
         */
    function (appointmentId, appointmentVehicleRequest, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/vehicle");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdVehiclePut.');
        }
        // verify required parameter 'appointmentVehicleRequest' is not null or undefined
        if (appointmentVehicleRequest === null || appointmentVehicleRequest === undefined) {
            throw new Error('Required parameter appointmentVehicleRequest was null or undefined when calling appointmentAppointmentIdVehiclePut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: appointmentVehicleRequest == null ? '' : JSON.stringify(appointmentVehicleRequest),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Appointments allow clients to schedule service
     * Retrieves a list of appointments
     * @param authorization Authorization Header
     * @param vendorId vendorId
     */
    /**
         * Appointments allow clients to schedule service
         * Retrieves a list of appointments
         * @param authorization Authorization Header
         * @param vendorId vendorId
         */
    ClientApi.prototype.appointmentGetWithHttpInfo = /**
         * Appointments allow clients to schedule service
         * Retrieves a list of appointments
         * @param authorization Authorization Header
         * @param vendorId vendorId
         */
    function (authorization, vendorId, extraHttpRequestParams) {
        var path = this.basePath + "/appointment";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (vendorId !== undefined) {
            queryParameters.set('vendor_id', vendorId);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The location of the pickup
     * Stores the coordinates and reverse lookup address where available
     * @param authorization Authorization Header
     */
    /**
         * The location of the pickup
         * Stores the coordinates and reverse lookup address where available
         * @param authorization Authorization Header
         */
    ClientApi.prototype.locationGetWithHttpInfo = /**
         * The location of the pickup
         * Stores the coordinates and reverse lookup address where available
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/location";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Users submit location data for pickups
     * Retrieves a location by id
     * @param locationId
     * @param authorization Authorization Header
     */
    /**
         * Users submit location data for pickups
         * Retrieves a location by id
         * @param locationId
         * @param authorization Authorization Header
         */
    ClientApi.prototype.locationLocationIdGetWithHttpInfo = /**
         * Users submit location data for pickups
         * Retrieves a location by id
         * @param locationId
         * @param authorization Authorization Header
         */
    function (locationId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/location/" + locationId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling locationLocationIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
     * Retrieves a list of pickups
     * @param authorization Authorization Header
     */
    /**
         * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
         * Retrieves a list of pickups
         * @param authorization Authorization Header
         */
    ClientApi.prototype.pickupGetWithHttpInfo = /**
         * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
         * Retrieves a list of pickups
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/pickup";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
     * Returns a pickup with the given id
     * @param pickupId
     * @param authorization Authorization Header
     */
    /**
         * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
         * Returns a pickup with the given id
         * @param pickupId
         * @param authorization Authorization Header
         */
    ClientApi.prototype.pickupPickupIdGetWithHttpInfo = /**
         * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
         * Returns a pickup with the given id
         * @param pickupId
         * @param authorization Authorization Header
         */
    function (pickupId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/pickup/" + pickupId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'pickupId' is not null or undefined
        if (pickupId === null || pickupId === undefined) {
            throw new Error('Required parameter pickupId was null or undefined when calling pickupPickupIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Services are specific jobs advertised for the conceirge pickup
     * Returns a list of services
     * @param authorization Authorization Header
     */
    /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param authorization Authorization Header
         */
    ClientApi.prototype.serviceGetWithHttpInfo = /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/service";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Service Selections represent user selected service items
     * Returns an collection of service selections
     * @param authorization Authorization Header
     */
    /**
         * Service Selections represent user selected service items
         * Returns an collection of service selections
         * @param authorization Authorization Header
         */
    ClientApi.prototype.serviceSelectionGetWithHttpInfo = /**
         * Service Selections represent user selected service items
         * Returns an collection of service selections
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/service-selection";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Service Selection represents a user selected service
     * Returns the selection with the given id
     * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
     * @param authorization Authorization Header
     */
    /**
         * Service Selection represents a user selected service
         * Returns the selection with the given id
         * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
         * @param authorization Authorization Header
         */
    ClientApi.prototype.serviceSelectionServiceSelectionIdGetWithHttpInfo = /**
         * Service Selection represents a user selected service
         * Returns the selection with the given id
         * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
         * @param authorization Authorization Header
         */
    function (serviceSelectionId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/service-selection/" + serviceSelectionId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'serviceSelectionId' is not null or undefined
        if (serviceSelectionId === null || serviceSelectionId === undefined) {
            throw new Error('Required parameter serviceSelectionId was null or undefined when calling serviceSelectionServiceSelectionIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Services are specific jobs advertised for the conceirge pickup
     * Returns a list of services
     * @param serviceId the id of the service
     * @param authorization Authorization Header
     */
    /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param serviceId the id of the service
         * @param authorization Authorization Header
         */
    ClientApi.prototype.serviceServiceIdGetWithHttpInfo = /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param serviceId the id of the service
         * @param authorization Authorization Header
         */
    function (serviceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/service/" + serviceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'serviceId' is not null or undefined
        if (serviceId === null || serviceId === undefined) {
            throw new Error('Required parameter serviceId was null or undefined when calling serviceServiceIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Users
     * Returns a list of users
     * @param authorization Authorization Header
     */
    /**
         * Users
         * Returns a list of users
         * @param authorization Authorization Header
         */
    ClientApi.prototype.userGetWithHttpInfo = /**
         * Users
         * Returns a list of users
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/user";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The user
     * Returns a user profile
     * @param userId the id of the user
     * @param authorization Authorization Header
     */
    /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    ClientApi.prototype.userUserIdGetWithHttpInfo = /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    function (userId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/user/" + userId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling userUserIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The user
     * Returns a user profile
     * @param userId the id of the user
     * @param authorization Authorization Header
     */
    /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    ClientApi.prototype.userUserIdPutWithHttpInfo = /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    function (userId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/user/" + userId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling userUserIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Remove Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    ClientApi.prototype.vendorVendorIdServicesVendorServiceIdDeleteWithHttpInfo = /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/services/" + vendorServiceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdDelete.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdDelete.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Retrieving Vendor Services
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    ClientApi.prototype.vendorVendorIdServicesVendorServiceIdGetWithHttpInfo = /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/services/" + vendorServiceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdGet.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    ClientApi.prototype.vendorVendorIdServicesVendorServiceIdPutWithHttpInfo = /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/services/" + vendorServiceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdPut.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    ClientApi.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    ClientApi.ctorParameters = function () { return [
        { type: Http, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
        { type: Configuration, decorators: [{ type: Optional },] },
    ]; };
    return ClientApi;
}());
export { ClientApi };
//# sourceMappingURL=ClientApi.js.map