/**
 * Shyft Auto
 * An api to run the client and administration of the shyft auto app.
 *
 * OpenAPI spec version: 0.2.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import 'rxjs/add/operator/map';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
/* tslint:disable:no-unused-variable member-ordering */
var AdminApi = /** @class */ (function () {
    function AdminApi(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://uat.futuredms.com/shyft-api/v1';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    /**
         *
         * Extends object by coping non-existing properties.
         * @param objA object to be extended
         * @param objB source object
         */
    AdminApi.prototype.extendObj = /**
         *
         * Extends object by coping non-existing properties.
         * @param objA object to be extended
         * @param objB source object
         */
    function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * Appointments allow clients to schedule service.
     * Retrieves an appointment by id
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * Appointments allow clients to schedule service.
         * Retrieves an appointment by id
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdGet = /**
         * Appointments allow clients to schedule service.
         * Retrieves an appointment by id
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdGetWithHttpInfo(appointmentId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The location of an appointment pickup
     * An appointment location
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * The location of an appointment pickup
         * An appointment location
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdLocationGet = /**
         * The location of an appointment pickup
         * An appointment location
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdLocationGetWithHttpInfo(appointmentId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Appointments include pickups
     * Retrieves the pickup data associated with an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * Appointments include pickups
         * Retrieves the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdPickupGet = /**
         * Appointments include pickups
         * Retrieves the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdPickupGetWithHttpInfo(appointmentId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Appointments include pickups
     * Updates the pickup data associated with an appointment
     * @param appointmentId The id of the appointment
     * @param pickupRequest The pickup model for update
     * @param authorization Authorization Header
     */
    /**
         * Appointments include pickups
         * Updates the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param pickupRequest The pickup model for update
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdPickupPut = /**
         * Appointments include pickups
         * Updates the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param pickupRequest The pickup model for update
         * @param authorization Authorization Header
         */
    function (appointmentId, pickupRequest, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdPickupPutWithHttpInfo(appointmentId, pickupRequest, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The appointment service selections
     * Returns the service selections of an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdServiceSelectionGet = /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdServiceSelectionGetWithHttpInfo(appointmentId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The appointment service selections
     * Returns the service selections of an appointment
     * @param appointmentId The id of the appointment
     * @param serviceSelectionId the id of the association between a user selected service and an appointment
     * @param authorization Authorization Header
     */
    /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdServiceSelectionServiceSelectionIdGet = /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, serviceSelectionId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdServiceSelectionServiceSelectionIdGetWithHttpInfo(appointmentId, serviceSelectionId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * User makes an appointment
     * Returns the user of an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * User makes an appointment
         * Returns the user of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdUserGet = /**
         * User makes an appointment
         * Returns the user of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        return this.appointmentAppointmentIdUserGetWithHttpInfo(appointmentId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Appointments allow clients to schedule service
     * Retrieves a list of appointments
     * @param authorization Authorization Header
     * @param vendorId vendorId
     */
    /**
         * Appointments allow clients to schedule service
         * Retrieves a list of appointments
         * @param authorization Authorization Header
         * @param vendorId vendorId
         */
    AdminApi.prototype.appointmentGet = /**
         * Appointments allow clients to schedule service
         * Retrieves a list of appointments
         * @param authorization Authorization Header
         * @param vendorId vendorId
         */
    function (authorization, vendorId, extraHttpRequestParams) {
        return this.appointmentGetWithHttpInfo(authorization, vendorId, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     *
     * @param driverId the id of the driver
     * @param authorization Authorization Header
     * @param userId
     */
    /**
         *
         *
         * @param driverId the id of the driver
         * @param authorization Authorization Header
         * @param userId
         */
    AdminApi.prototype.driversDriverIdPut = /**
         *
         *
         * @param driverId the id of the driver
         * @param authorization Authorization Header
         * @param userId
         */
    function (driverId, authorization, userId, extraHttpRequestParams) {
        return this.driversDriverIdPutWithHttpInfo(driverId, authorization, userId, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     *
     * @param authorization Authorization Header
     */
    /**
         *
         *
         * @param authorization Authorization Header
         */
    AdminApi.prototype.driversGet = /**
         *
         *
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.driversGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     *
     * @param authorization Authorization Header
     */
    /**
         *
         *
         * @param authorization Authorization Header
         */
    AdminApi.prototype.fleetGet = /**
         *
         *
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.fleetGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The location of the pickup
     * Stores the coordinates and reverse lookup address where available
     * @param authorization Authorization Header
     */
    /**
         * The location of the pickup
         * Stores the coordinates and reverse lookup address where available
         * @param authorization Authorization Header
         */
    AdminApi.prototype.locationGet = /**
         * The location of the pickup
         * Stores the coordinates and reverse lookup address where available
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.locationGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Users submit location data for pickups
     * Retrieves a location by id
     * @param locationId
     * @param authorization Authorization Header
     */
    /**
         * Users submit location data for pickups
         * Retrieves a location by id
         * @param locationId
         * @param authorization Authorization Header
         */
    AdminApi.prototype.locationLocationIdGet = /**
         * Users submit location data for pickups
         * Retrieves a location by id
         * @param locationId
         * @param authorization Authorization Header
         */
    function (locationId, authorization, extraHttpRequestParams) {
        return this.locationLocationIdGetWithHttpInfo(locationId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
     * Retrieves a list of pickups
     * @param authorization Authorization Header
     */
    /**
         * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
         * Retrieves a list of pickups
         * @param authorization Authorization Header
         */
    AdminApi.prototype.pickupGet = /**
         * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
         * Retrieves a list of pickups
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.pickupGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
     * Returns a pickup with the given id
     * @param pickupId
     * @param authorization Authorization Header
     */
    /**
         * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
         * Returns a pickup with the given id
         * @param pickupId
         * @param authorization Authorization Header
         */
    AdminApi.prototype.pickupPickupIdGet = /**
         * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
         * Returns a pickup with the given id
         * @param pickupId
         * @param authorization Authorization Header
         */
    function (pickupId, authorization, extraHttpRequestParams) {
        return this.pickupPickupIdGetWithHttpInfo(pickupId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Services are categorized
     *
     * @param authorization Authorization Header
     */
    /**
         * Services are categorized
         *
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceCategoryGet = /**
         * Services are categorized
         *
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.serviceCategoryGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     *
     * @param serviceCategoryId The id of the service category
     * @param authorization the authorization token
     */
    /**
         *
         *
         * @param serviceCategoryId The id of the service category
         * @param authorization the authorization token
         */
    AdminApi.prototype.serviceCategoryServiceCategoryIdGet = /**
         *
         *
         * @param serviceCategoryId The id of the service category
         * @param authorization the authorization token
         */
    function (serviceCategoryId, authorization, extraHttpRequestParams) {
        return this.serviceCategoryServiceCategoryIdGetWithHttpInfo(serviceCategoryId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     *
     * @param serviceCategoryId The id of the service category
     * @param serviceCategoryRequest Add or update service category data
     * @param authorization the authorization token
     */
    /**
         *
         *
         * @param serviceCategoryId The id of the service category
         * @param serviceCategoryRequest Add or update service category data
         * @param authorization the authorization token
         */
    AdminApi.prototype.serviceCategoryServiceCategoryIdPut = /**
         *
         *
         * @param serviceCategoryId The id of the service category
         * @param serviceCategoryRequest Add or update service category data
         * @param authorization the authorization token
         */
    function (serviceCategoryId, serviceCategoryRequest, authorization, extraHttpRequestParams) {
        return this.serviceCategoryServiceCategoryIdPutWithHttpInfo(serviceCategoryId, serviceCategoryRequest, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Services are specific jobs advertised for the conceirge pickup
     * Returns a list of services
     * @param authorization Authorization Header
     */
    /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceGet = /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.serviceGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Service Selections represent user selected service items
     * Returns an collection of service selections
     * @param authorization Authorization Header
     */
    /**
         * Service Selections represent user selected service items
         * Returns an collection of service selections
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceSelectionGet = /**
         * Service Selections represent user selected service items
         * Returns an collection of service selections
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.serviceSelectionGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Service Selection represents a user selected service
     * Returns the selection with the given id
     * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
     * @param authorization Authorization Header
     */
    /**
         * Service Selection represents a user selected service
         * Returns the selection with the given id
         * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceSelectionServiceSelectionIdGet = /**
         * Service Selection represents a user selected service
         * Returns the selection with the given id
         * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
         * @param authorization Authorization Header
         */
    function (serviceSelectionId, authorization, extraHttpRequestParams) {
        return this.serviceSelectionServiceSelectionIdGetWithHttpInfo(serviceSelectionId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Services are specific jobs advertised for the conceirge pickup
     * Returns a list of services
     * @param serviceId the id of the service
     * @param authorization Authorization Header
     */
    /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param serviceId the id of the service
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceServiceIdGet = /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param serviceId the id of the service
         * @param authorization Authorization Header
         */
    function (serviceId, authorization, extraHttpRequestParams) {
        return this.serviceServiceIdGetWithHttpInfo(serviceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Services can be added to enhance a vendor&#39;s offering
     * Adds or updates a vendor&#39;s service
     * @param serviceId the id of the service
     * @param servicePayload The details of the service
     * @param authorization Authorization Header
     */
    /**
         * Services can be added to enhance a vendor&#39;s offering
         * Adds or updates a vendor&#39;s service
         * @param serviceId the id of the service
         * @param servicePayload The details of the service
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceServiceIdPut = /**
         * Services can be added to enhance a vendor&#39;s offering
         * Adds or updates a vendor&#39;s service
         * @param serviceId the id of the service
         * @param servicePayload The details of the service
         * @param authorization Authorization Header
         */
    function (serviceId, servicePayload, authorization, extraHttpRequestParams) {
        return this.serviceServiceIdPutWithHttpInfo(serviceId, servicePayload, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Users
     * Returns a list of users
     * @param authorization Authorization Header
     */
    /**
         * Users
         * Returns a list of users
         * @param authorization Authorization Header
         */
    AdminApi.prototype.userGet = /**
         * Users
         * Returns a list of users
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        return this.userGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The user
     * Returns a user profile
     * @param newUserProfileRequest the request body
     * @param authorization Authorization Header
     */
    /**
         * The user
         * Returns a user profile
         * @param newUserProfileRequest the request body
         * @param authorization Authorization Header
         */
    AdminApi.prototype.userPost = /**
         * The user
         * Returns a user profile
         * @param newUserProfileRequest the request body
         * @param authorization Authorization Header
         */
    function (newUserProfileRequest, authorization, extraHttpRequestParams) {
        return this.userPostWithHttpInfo(newUserProfileRequest, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The user
     * Returns a user profile
     * @param userId the id of the user
     * @param authorization Authorization Header
     */
    /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    AdminApi.prototype.userUserIdGet = /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    function (userId, authorization, extraHttpRequestParams) {
        return this.userUserIdGetWithHttpInfo(userId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * The user
     * Returns a user profile
     * @param userId the id of the user
     * @param authorization Authorization Header
     */
    /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    AdminApi.prototype.userUserIdPut = /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    function (userId, userProfileRequest, authorization, extraHttpRequestParams) {
        return this.userUserIdPutWithHttpInfo(userId, userProfileRequest, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     *
     *
     * @param vendorId
     * @param vendorLocationRequest The location object of the vendor
     */
    /**
         *
         *
         * @param vendorId
         * @param vendorLocationRequest The location object of the vendor
         */
    AdminApi.prototype.vendorVendorIdLocationPut = /**
         *
         *
         * @param vendorId
         * @param vendorLocationRequest The location object of the vendor
         */
    function (vendorId, vendorLocationRequest, extraHttpRequestParams) {
        return this.vendorVendorIdLocationPutWithHttpInfo(vendorId, vendorLocationRequest, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Remove Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    AdminApi.prototype.vendorVendorIdServicesVendorServiceIdDelete = /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdServicesVendorServiceIdDeleteWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Retrieving Vendor Services
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    AdminApi.prototype.vendorVendorIdServicesVendorServiceIdGet = /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdServicesVendorServiceIdGetWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Update Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    AdminApi.prototype.vendorVendorIdServicesVendorServiceIdPut = /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        return this.vendorVendorIdServicesVendorServiceIdPutWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Appointments allow clients to schedule service.
     * Retrieves an appointment by id
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * Appointments allow clients to schedule service.
         * Retrieves an appointment by id
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdGetWithHttpInfo = /**
         * Appointments allow clients to schedule service.
         * Retrieves an appointment by id
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The location of an appointment pickup
     * An appointment location
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * The location of an appointment pickup
         * An appointment location
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdLocationGetWithHttpInfo = /**
         * The location of an appointment pickup
         * An appointment location
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/location");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdLocationGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Appointments include pickups
     * Retrieves the pickup data associated with an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * Appointments include pickups
         * Retrieves the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdPickupGetWithHttpInfo = /**
         * Appointments include pickups
         * Retrieves the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/pickup");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdPickupGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Appointments include pickups
     * Updates the pickup data associated with an appointment
     * @param appointmentId The id of the appointment
     * @param pickupRequest The pickup model for update
     * @param authorization Authorization Header
     */
    /**
         * Appointments include pickups
         * Updates the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param pickupRequest The pickup model for update
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdPickupPutWithHttpInfo = /**
         * Appointments include pickups
         * Updates the pickup data associated with an appointment
         * @param appointmentId The id of the appointment
         * @param pickupRequest The pickup model for update
         * @param authorization Authorization Header
         */
    function (appointmentId, pickupRequest, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/pickup");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdPickupPut.');
        }
        // verify required parameter 'pickupRequest' is not null or undefined
        if (pickupRequest === null || pickupRequest === undefined) {
            throw new Error('Required parameter pickupRequest was null or undefined when calling appointmentAppointmentIdPickupPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: pickupRequest == null ? '' : JSON.stringify(pickupRequest),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The appointment service selections
     * Returns the service selections of an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdServiceSelectionGetWithHttpInfo = /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/service-selection");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdServiceSelectionGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The appointment service selections
     * Returns the service selections of an appointment
     * @param appointmentId The id of the appointment
     * @param serviceSelectionId the id of the association between a user selected service and an appointment
     * @param authorization Authorization Header
     */
    /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdServiceSelectionServiceSelectionIdGetWithHttpInfo = /**
         * The appointment service selections
         * Returns the service selections of an appointment
         * @param appointmentId The id of the appointment
         * @param serviceSelectionId the id of the association between a user selected service and an appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, serviceSelectionId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/service-selection/" + serviceSelectionId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdServiceSelectionServiceSelectionIdGet.');
        }
        // verify required parameter 'serviceSelectionId' is not null or undefined
        if (serviceSelectionId === null || serviceSelectionId === undefined) {
            throw new Error('Required parameter serviceSelectionId was null or undefined when calling appointmentAppointmentIdServiceSelectionServiceSelectionIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * User makes an appointment
     * Returns the user of an appointment
     * @param appointmentId The id of the appointment
     * @param authorization Authorization Header
     */
    /**
         * User makes an appointment
         * Returns the user of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    AdminApi.prototype.appointmentAppointmentIdUserGetWithHttpInfo = /**
         * User makes an appointment
         * Returns the user of an appointment
         * @param appointmentId The id of the appointment
         * @param authorization Authorization Header
         */
    function (appointmentId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/appointment/" + appointmentId + "/user");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'appointmentId' is not null or undefined
        if (appointmentId === null || appointmentId === undefined) {
            throw new Error('Required parameter appointmentId was null or undefined when calling appointmentAppointmentIdUserGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Appointments allow clients to schedule service
     * Retrieves a list of appointments
     * @param authorization Authorization Header
     * @param vendorId vendorId
     */
    /**
         * Appointments allow clients to schedule service
         * Retrieves a list of appointments
         * @param authorization Authorization Header
         * @param vendorId vendorId
         */
    AdminApi.prototype.appointmentGetWithHttpInfo = /**
         * Appointments allow clients to schedule service
         * Retrieves a list of appointments
         * @param authorization Authorization Header
         * @param vendorId vendorId
         */
    function (authorization, vendorId, extraHttpRequestParams) {
        var path = this.basePath + "/appointment";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (vendorId !== undefined) {
            queryParameters.set('vendor_id', vendorId);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param driverId the id of the driver
     * @param authorization Authorization Header
     * @param userId
     */
    /**
         *
         *
         * @param driverId the id of the driver
         * @param authorization Authorization Header
         * @param userId
         */
    AdminApi.prototype.driversDriverIdPutWithHttpInfo = /**
         *
         *
         * @param driverId the id of the driver
         * @param authorization Authorization Header
         * @param userId
         */
    function (driverId, authorization, userId, extraHttpRequestParams) {
        var path = this.basePath + ("/drivers/" + driverId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'driverId' is not null or undefined
        if (driverId === null || driverId === undefined) {
            throw new Error('Required parameter driverId was null or undefined when calling driversDriverIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: userId == null ? '' : JSON.stringify(userId),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param authorization Authorization Header
     */
    /**
         *
         *
         * @param authorization Authorization Header
         */
    AdminApi.prototype.driversGetWithHttpInfo = /**
         *
         *
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/drivers";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param authorization Authorization Header
     */
    /**
         *
         *
         * @param authorization Authorization Header
         */
    AdminApi.prototype.fleetGetWithHttpInfo = /**
         *
         *
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/fleet";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The location of the pickup
     * Stores the coordinates and reverse lookup address where available
     * @param authorization Authorization Header
     */
    /**
         * The location of the pickup
         * Stores the coordinates and reverse lookup address where available
         * @param authorization Authorization Header
         */
    AdminApi.prototype.locationGetWithHttpInfo = /**
         * The location of the pickup
         * Stores the coordinates and reverse lookup address where available
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/location";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Users submit location data for pickups
     * Retrieves a location by id
     * @param locationId
     * @param authorization Authorization Header
     */
    /**
         * Users submit location data for pickups
         * Retrieves a location by id
         * @param locationId
         * @param authorization Authorization Header
         */
    AdminApi.prototype.locationLocationIdGetWithHttpInfo = /**
         * Users submit location data for pickups
         * Retrieves a location by id
         * @param locationId
         * @param authorization Authorization Header
         */
    function (locationId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/location/" + locationId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'locationId' is not null or undefined
        if (locationId === null || locationId === undefined) {
            throw new Error('Required parameter locationId was null or undefined when calling locationLocationIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
     * Retrieves a list of pickups
     * @param authorization Authorization Header
     */
    /**
         * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
         * Retrieves a list of pickups
         * @param authorization Authorization Header
         */
    AdminApi.prototype.pickupGetWithHttpInfo = /**
         * Drivers, Car Model and Color, and time of departure and eta are data returneed for pickups
         * Retrieves a list of pickups
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/pickup";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
     * Returns a pickup with the given id
     * @param pickupId
     * @param authorization Authorization Header
     */
    /**
         * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
         * Returns a pickup with the given id
         * @param pickupId
         * @param authorization Authorization Header
         */
    AdminApi.prototype.pickupPickupIdGetWithHttpInfo = /**
         * Drivers, Car Model and Color, and time of departure and eta are data returned for pickups
         * Returns a pickup with the given id
         * @param pickupId
         * @param authorization Authorization Header
         */
    function (pickupId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/pickup/" + pickupId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'pickupId' is not null or undefined
        if (pickupId === null || pickupId === undefined) {
            throw new Error('Required parameter pickupId was null or undefined when calling pickupPickupIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Services are categorized
     *
     * @param authorization Authorization Header
     */
    /**
         * Services are categorized
         *
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceCategoryGetWithHttpInfo = /**
         * Services are categorized
         *
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/service-category";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param serviceCategoryId The id of the service category
     * @param authorization the authorization token
     */
    /**
         *
         *
         * @param serviceCategoryId The id of the service category
         * @param authorization the authorization token
         */
    AdminApi.prototype.serviceCategoryServiceCategoryIdGetWithHttpInfo = /**
         *
         *
         * @param serviceCategoryId The id of the service category
         * @param authorization the authorization token
         */
    function (serviceCategoryId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/service-category/" + serviceCategoryId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'serviceCategoryId' is not null or undefined
        if (serviceCategoryId === null || serviceCategoryId === undefined) {
            throw new Error('Required parameter serviceCategoryId was null or undefined when calling serviceCategoryServiceCategoryIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param serviceCategoryId The id of the service category
     * @param serviceCategoryRequest Add or update service category data
     * @param authorization the authorization token
     */
    /**
         *
         *
         * @param serviceCategoryId The id of the service category
         * @param serviceCategoryRequest Add or update service category data
         * @param authorization the authorization token
         */
    AdminApi.prototype.serviceCategoryServiceCategoryIdPutWithHttpInfo = /**
         *
         *
         * @param serviceCategoryId The id of the service category
         * @param serviceCategoryRequest Add or update service category data
         * @param authorization the authorization token
         */
    function (serviceCategoryId, serviceCategoryRequest, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/service-category/" + serviceCategoryId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'serviceCategoryId' is not null or undefined
        if (serviceCategoryId === null || serviceCategoryId === undefined) {
            throw new Error('Required parameter serviceCategoryId was null or undefined when calling serviceCategoryServiceCategoryIdPut.');
        }
        // verify required parameter 'serviceCategoryRequest' is not null or undefined
        if (serviceCategoryRequest === null || serviceCategoryRequest === undefined) {
            throw new Error('Required parameter serviceCategoryRequest was null or undefined when calling serviceCategoryServiceCategoryIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: serviceCategoryRequest == null ? '' : JSON.stringify(serviceCategoryRequest),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Services are specific jobs advertised for the conceirge pickup
     * Returns a list of services
     * @param authorization Authorization Header
     */
    /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceGetWithHttpInfo = /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/service";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Service Selections represent user selected service items
     * Returns an collection of service selections
     * @param authorization Authorization Header
     */
    /**
         * Service Selections represent user selected service items
         * Returns an collection of service selections
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceSelectionGetWithHttpInfo = /**
         * Service Selections represent user selected service items
         * Returns an collection of service selections
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/service-selection";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Service Selection represents a user selected service
     * Returns the selection with the given id
     * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
     * @param authorization Authorization Header
     */
    /**
         * Service Selection represents a user selected service
         * Returns the selection with the given id
         * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceSelectionServiceSelectionIdGetWithHttpInfo = /**
         * Service Selection represents a user selected service
         * Returns the selection with the given id
         * @param serviceSelectionId the id of the service selection (an association between an appointment and a service)
         * @param authorization Authorization Header
         */
    function (serviceSelectionId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/service-selection/" + serviceSelectionId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'serviceSelectionId' is not null or undefined
        if (serviceSelectionId === null || serviceSelectionId === undefined) {
            throw new Error('Required parameter serviceSelectionId was null or undefined when calling serviceSelectionServiceSelectionIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Services are specific jobs advertised for the conceirge pickup
     * Returns a list of services
     * @param serviceId the id of the service
     * @param authorization Authorization Header
     */
    /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param serviceId the id of the service
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceServiceIdGetWithHttpInfo = /**
         * Services are specific jobs advertised for the conceirge pickup
         * Returns a list of services
         * @param serviceId the id of the service
         * @param authorization Authorization Header
         */
    function (serviceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/service/" + serviceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'serviceId' is not null or undefined
        if (serviceId === null || serviceId === undefined) {
            throw new Error('Required parameter serviceId was null or undefined when calling serviceServiceIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Services can be added to enhance a vendor&#39;s offering
     * Adds or updates a vendor&#39;s service
     * @param serviceId the id of the service
     * @param servicePayload The details of the service
     * @param authorization Authorization Header
     */
    /**
         * Services can be added to enhance a vendor&#39;s offering
         * Adds or updates a vendor&#39;s service
         * @param serviceId the id of the service
         * @param servicePayload The details of the service
         * @param authorization Authorization Header
         */
    AdminApi.prototype.serviceServiceIdPutWithHttpInfo = /**
         * Services can be added to enhance a vendor&#39;s offering
         * Adds or updates a vendor&#39;s service
         * @param serviceId the id of the service
         * @param servicePayload The details of the service
         * @param authorization Authorization Header
         */
    function (serviceId, servicePayload, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/service/" + serviceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'serviceId' is not null or undefined
        if (serviceId === null || serviceId === undefined) {
            throw new Error('Required parameter serviceId was null or undefined when calling serviceServiceIdPut.');
        }
        // verify required parameter 'servicePayload' is not null or undefined
        if (servicePayload === null || servicePayload === undefined) {
            throw new Error('Required parameter servicePayload was null or undefined when calling serviceServiceIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: servicePayload == null ? '' : JSON.stringify(servicePayload),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Users
     * Returns a list of users
     * @param authorization Authorization Header
     */
    /**
         * Users
         * Returns a list of users
         * @param authorization Authorization Header
         */
    AdminApi.prototype.userGetWithHttpInfo = /**
         * Users
         * Returns a list of users
         * @param authorization Authorization Header
         */
    function (authorization, extraHttpRequestParams) {
        var path = this.basePath + "/user";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The user
     * Returns a user profile
     * @param newUserProfileRequest the request body
     * @param authorization Authorization Header
     */
    /**
         * The user
         * Returns a user profile
         * @param newUserProfileRequest the request body
         * @param authorization Authorization Header
         */
    AdminApi.prototype.userPostWithHttpInfo = /**
         * The user
         * Returns a user profile
         * @param newUserProfileRequest the request body
         * @param authorization Authorization Header
         */
    function (newUserProfileRequest, authorization, extraHttpRequestParams) {
        var path = this.basePath + "/user";
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'newUserProfileRequest' is not null or undefined
        if (newUserProfileRequest === null || newUserProfileRequest === undefined) {
            throw new Error('Required parameter newUserProfileRequest was null or undefined when calling userPost.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: newUserProfileRequest == null ? '' : JSON.stringify(newUserProfileRequest),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The user
     * Returns a user profile
     * @param userId the id of the user
     * @param authorization Authorization Header
     */
    /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    AdminApi.prototype.userUserIdGetWithHttpInfo = /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    function (userId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/user/" + userId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling userUserIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The user
     * Returns a user profile
     * @param userId the id of the user
     * @param authorization Authorization Header
     */
    /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    AdminApi.prototype.userUserIdPutWithHttpInfo = /**
         * The user
         * Returns a user profile
         * @param userId the id of the user
         * @param authorization Authorization Header
         */
    function (userId, userProfileRequest, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/user/" + userId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'userId' is not null or undefined
        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling userUserIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            body: userProfileRequest == null ? '' : JSON.stringify(userProfileRequest),
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     *
     *
     * @param vendorId
     * @param vendorLocationRequest The location object of the vendor
     */
    /**
         *
         *
         * @param vendorId
         * @param vendorLocationRequest The location object of the vendor
         */
    AdminApi.prototype.vendorVendorIdLocationPutWithHttpInfo = /**
         *
         *
         * @param vendorId
         * @param vendorLocationRequest The location object of the vendor
         */
    function (vendorId, vendorLocationRequest, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/location");
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdLocationPut.');
        }
        // verify required parameter 'vendorLocationRequest' is not null or undefined
        if (vendorLocationRequest === null || vendorLocationRequest === undefined) {
            throw new Error('Required parameter vendorLocationRequest was null or undefined when calling vendorVendorIdLocationPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: vendorLocationRequest == null ? '' : JSON.stringify(vendorLocationRequest),
            // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Remove Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    AdminApi.prototype.vendorVendorIdServicesVendorServiceIdDeleteWithHttpInfo = /**
         * Remove Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/services/" + vendorServiceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdDelete.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdDelete.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Retrieving Vendor Services
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    AdminApi.prototype.vendorVendorIdServicesVendorServiceIdGetWithHttpInfo = /**
         * Retrieving Vendor Services
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/services/" + vendorServiceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdGet.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdGet.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Vendor Service
     *
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    AdminApi.prototype.vendorVendorIdServicesVendorServiceIdPutWithHttpInfo = /**
         * Update Vendor Service
         *
         * @param vendorId the id of the vendor
         * @param vendorServiceId the id of the association between vendor and service
         * @param authorization Authorization Header
         */
    function (vendorId, vendorServiceId, authorization, extraHttpRequestParams) {
        var path = this.basePath + ("/vendor/" + vendorId + "/services/" + vendorServiceId);
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdPut.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdPut.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (Authorization) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    AdminApi.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    AdminApi.ctorParameters = function () { return [
        { type: Http, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
        { type: Configuration, decorators: [{ type: Optional },] },
    ]; };
    return AdminApi;
}());
export { AdminApi };
//# sourceMappingURL=AdminApi.js.map