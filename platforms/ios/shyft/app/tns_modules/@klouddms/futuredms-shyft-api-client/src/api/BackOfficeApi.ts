/**
 * Shyft Auto
 * An api to run the client and administration of the shyft auto app.
 *
 * OpenAPI spec version: 0.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class BackOfficeApi {
    protected basePath = 'https://uat.futuredms.com/shyft-api/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }
	
	/**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
   private extendObj<T1,T2>(objA: T1, objB: T2): T1 & T2 {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (<T1 & T2>objA)[key] = (<T1 & T2>objB)[key];
            }
        }
        return <T1&T2>objA;
    }


    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param fleetId the id of the fleet vehicle
     * @param fleetRequest adds or updates a vehicle in the fleet
     * @param authorization Authorization Header
     */
    public fleetFleetIdPut(fleetId: string, fleetRequest: models.FleetModel, authorization?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.fleetFleetIdPutWithHttpInfo(fleetId, fleetRequest, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * The vendor list allows the backoffice to manage shyft auto customers
     * Retrieves a list of Vendors
     * @param authorization Authorization Header
     */
    public vendorGet(authorization?: string, extraHttpRequestParams?: any): Observable<Array<models.VendorSearchModel>> {
        return this.vendorGetWithHttpInfo(authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * A vendor defines services in a service area
     * retrieves a vendor
     * @param vendorId the id of a vendor
     * @param authorization Authorization Header
     */
    public vendorVendorIdGet(vendorId: string, authorization?: string, extraHttpRequestParams?: any): Observable<models.VendorSearchModel> {
        return this.vendorVendorIdGetWithHttpInfo(vendorId, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param vendorId the id of the vendor
     * @param vendorRequest vendor data
     * @param authorization Authorization Header
     */
    public vendorVendorIdPut(vendorId: string, vendorRequest: models.VendorModel, authorization?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.vendorVendorIdPutWithHttpInfo(vendorId, vendorRequest, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param vendorId the id of the vendor
     * @param authorization Authorization Header
     */
    public vendorVendorIdServicesGet(vendorId: string, authorization?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.vendorVendorIdServicesGetWithHttpInfo(vendorId, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Remove Vendor Service
     * 
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    public vendorVendorIdServicesVendorServiceIdDelete(vendorId: string, vendorServiceId: string, authorization?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.vendorVendorIdServicesVendorServiceIdDeleteWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Retrieving Vendor Services
     * 
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    public vendorVendorIdServicesVendorServiceIdGet(vendorId: string, vendorServiceId: string, authorization?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.vendorVendorIdServicesVendorServiceIdGetWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update Vendor Service
     * 
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    public vendorVendorIdServicesVendorServiceIdPut(vendorId: string, vendorServiceId: string, authorization?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.vendorVendorIdServicesVendorServiceIdPutWithHttpInfo(vendorId, vendorServiceId, authorization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param fleetId the id of the fleet vehicle
     * @param fleetRequest adds or updates a vehicle in the fleet
     * @param authorization Authorization Header
     */
    public fleetFleetIdPutWithHttpInfo(fleetId: string, fleetRequest: models.FleetModel, authorization?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/fleet/${fleetId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'fleetId' is not null or undefined
        if (fleetId === null || fleetId === undefined) {
            throw new Error('Required parameter fleetId was null or undefined when calling fleetFleetIdPut.');
        }
        // verify required parameter 'fleetRequest' is not null or undefined
        if (fleetRequest === null || fleetRequest === undefined) {
            throw new Error('Required parameter fleetRequest was null or undefined when calling fleetFleetIdPut.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
        // authentication (Authorization) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: fleetRequest == null ? '' : JSON.stringify(fleetRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * The vendor list allows the backoffice to manage shyft auto customers
     * Retrieves a list of Vendors
     * @param authorization Authorization Header
     */
    public vendorGetWithHttpInfo(authorization?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/vendor`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
        // authentication (Authorization) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * A vendor defines services in a service area
     * retrieves a vendor
     * @param vendorId the id of a vendor
     * @param authorization Authorization Header
     */
    public vendorVendorIdGetWithHttpInfo(vendorId: string, authorization?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/vendor/${vendorId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
        // authentication (Authorization) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param vendorId the id of the vendor
     * @param vendorRequest vendor data
     * @param authorization Authorization Header
     */
    public vendorVendorIdPutWithHttpInfo(vendorId: string, vendorRequest: models.VendorModel, authorization?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/vendor/${vendorId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdPut.');
        }
        // verify required parameter 'vendorRequest' is not null or undefined
        if (vendorRequest === null || vendorRequest === undefined) {
            throw new Error('Required parameter vendorRequest was null or undefined when calling vendorVendorIdPut.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
        // authentication (Authorization) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            

        headers.set('Content-Type', 'application/json');


        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: vendorRequest == null ? '' : JSON.stringify(vendorRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Adding and updating vendors
     * adds or updates a vendor at the given id
     * @param vendorId the id of the vendor
     * @param authorization Authorization Header
     */
    public vendorVendorIdServicesGetWithHttpInfo(vendorId: string, authorization?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/vendor/${vendorId}/services`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
        // authentication (Authorization) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Remove Vendor Service
     * 
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    public vendorVendorIdServicesVendorServiceIdDeleteWithHttpInfo(vendorId: string, vendorServiceId: string, authorization?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/vendor/${vendorId}/services/${vendorServiceId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdDelete.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdDelete.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
        // authentication (Authorization) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Retrieving Vendor Services
     * 
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    public vendorVendorIdServicesVendorServiceIdGetWithHttpInfo(vendorId: string, vendorServiceId: string, authorization?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/vendor/${vendorId}/services/${vendorServiceId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdGet.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdGet.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
        // authentication (Authorization) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update Vendor Service
     * 
     * @param vendorId the id of the vendor
     * @param vendorServiceId the id of the association between vendor and service
     * @param authorization Authorization Header
     */
    public vendorVendorIdServicesVendorServiceIdPutWithHttpInfo(vendorId: string, vendorServiceId: string, authorization?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/vendor/${vendorId}/services/${vendorServiceId}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'vendorId' is not null or undefined
        if (vendorId === null || vendorId === undefined) {
            throw new Error('Required parameter vendorId was null or undefined when calling vendorVendorIdServicesVendorServiceIdPut.');
        }
        // verify required parameter 'vendorServiceId' is not null or undefined
        if (vendorServiceId === null || vendorServiceId === undefined) {
            throw new Error('Required parameter vendorServiceId was null or undefined when calling vendorVendorIdServicesVendorServiceIdPut.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
        // authentication (Authorization) required
        if (this.configuration.apiKey)
        {
            headers.set('Authorization', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters
        });
        
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = this.extendObj(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
