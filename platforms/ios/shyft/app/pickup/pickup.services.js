"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var ApplicationSettings = require("application-settings");
require("rxjs/add/operator/map");
require("rxjs/add/operator/do");
var angular2_uuid_1 = require("angular2-uuid");
var utils = require("../shared/utils");
var PickupService = (function () {
    function PickupService(http) {
        this.http = http;
        this.addressUUID = angular2_uuid_1.UUID.UUID();
        this.currentAppointmentGetUrl = utils.baseurl + "appointment/" + JSON.parse(ApplicationSettings.getString("appointmentid", "{}"));
    }
    PickupService.prototype.getData = function (data) {
        var lat = data.latitude;
        var long = data.longitude;
        var url = "https://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat + "," + long + "&key=AIzaSyDyqz4svjh922aWBLWUmh0M94Y1J1nh2EM";
        return this.http.get(url)
            .map(function (res) { return res.json(); });
    };
    PickupService.prototype.getlatLong = function (address) {
        var url = "https://maps.googleapis.com/maps/api/place/details/json?placeid=" + address + "&key=AIzaSyAkXRQsMcFS2pVwoa4tfNe4tBRb7jhemg0";
        return this.http.get(url)
            .map(function (res) { return res.json(); });
    };
    PickupService.prototype.getModalLatLong = function (address) {
        console.log("here", address);
        var encodedAddress = encodeURI(address);
        var headers = this.latlongHeader();
        var url = "https://maps.googleapis.com/maps/api/geocode/json?address=" + encodedAddress + "&key=AIzaSyAkXRQsMcFS2pVwoa4tfNe4tBRb7jhemg0";
        return this.http.get(url, { headers: headers })
            .map(function (res) { return res.json(); });
    };
    PickupService.prototype.latlongHeader = function () {
        var headers = new http_1.Headers();
        headers.append("Content-Type", "application/json");
        return headers;
    };
    PickupService.prototype.getAddress = function (long, lat, text) {
        var url = "https://maps.googleapis.com/maps/api/place/autocomplete/json?input=" + text + "&language=en&key=AIzaSyDVHHTgO4zgOjwncPlCAs-PxC05wta3BJM";
        return this.http.get(url)
            .map(function (res) { return res.json(); });
    };
    PickupService.prototype.locationAdd = function (location) {
        this.appointmentID = JSON.parse(ApplicationSettings.getString("appointmentid", "{}"));
        var locationAddURL = "https://uat.futuredms.com/shyft-api/appointment/" + this.appointmentID + "/location";
        console.log("locationlocation  : ", JSON.stringify(location), "location URL : ", locationAddURL);
        this.id_token = JSON.parse(ApplicationSettings.getString("TOKEN", "{}"));
        var headers = new http_1.Headers();
        headers.append("Authorization", this.id_token);
        return this.http.put(locationAddURL, location, { headers: headers });
    };
    PickupService.prototype.updateAppointment = function () {
        console.log("local storage  Appointment id is : ", ApplicationSettings.getString("appointmentid"), " vendorid : ", JSON.parse(ApplicationSettings.getString("appointmentid", "{}")));
        var appointmentid = JSON.parse(ApplicationSettings.getString("appointmentid"));
        var appointmentUpdateURL = "https://uat.futuredms.com/shyft-api/appointment/" + appointmentid;
        this.id_token = JSON.parse(ApplicationSettings.getString("TOKEN", "{}"));
        var headers = new http_1.Headers();
        var date = new Date();
        var isoDate = date.toISOString();
        var appointment = {
            "id": JSON.parse(ApplicationSettings.getString("appointmentid", "{}")),
            "datetime": JSON.parse(ApplicationSettings.getString("appointmentDate", "{}")),
            "status": "Paid",
            "vendor": JSON.parse(ApplicationSettings.getString("vendorid", "{}"))
        };
        console.log("APpointment create url --> ", appointmentUpdateURL);
        console.log("Appointment PUT Data Testing : ", JSON.stringify(appointment));
        headers.append("Authorization", this.id_token);
        return this.http.put(appointmentUpdateURL, appointment, { headers: headers });
    };
    //-------------------------------- Appointment GET Request ----------------------------------//
    PickupService.prototype.currentAppointmentGet = function () {
        var headers = this.currentAppointmentGetHeader();
        return this.http.get(this.currentAppointmentGetUrl, { headers: headers })
            .map(function (res) {
            // If request fails, throw an Error that will be caught
            if (res.status < 200 || res.status >= 300) {
                throw new Error('This request has failed ' + res.status);
            }
            else {
                return res.json();
            }
        });
    };
    PickupService.prototype.currentAppointmentGetHeader = function () {
        var headers = new http_1.Headers();
        this.id_token = JSON.parse(ApplicationSettings.getString("TOKEN", "{}"));
        headers.append("Authorization", this.id_token);
        headers.append("Content-Type", "application/json");
        return headers;
    };
    PickupService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [http_1.Http])
    ], PickupService);
    return PickupService;
}());
exports.PickupService = PickupService;
//# sourceMappingURL=data:application/json;base64,